/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 E:\3D Design\Projects\2025\Ryoturia MIDI Piano Web Animation\web\Ryoturia MIDI Piano Web Animation - R2 - Apple Market - V2.glb -t 
*/

import React, { JSX, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import PianoKeyMaterial from "./PianoKeyMaterial";
import { useFrame } from "@react-three/fiber";
import PianoKey from "./PianoKey";
import { throttle } from "lodash";
import { AnimationClip, Group, Mesh, MeshStandardMaterial } from "three";
import DrumpadButton from "./DrumpadButton";

type ActionName =
  | "BlackKey.C#"
  | "WhiteKey.D"
  | "WhiteKey.E"
  | "WhiteKey.G"
  | "WhiteKey.A"
  | "WhiteKey.B"
  | "BlackKey.F#"
  | "Buttons.C#"
  | "Buttons.D"
  | "Buttons.E"
  | "Buttons.G"
  | "Buttons.A"
  | "Buttons.B";

interface GLTFAction extends AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    WhiteKeyC: Mesh;
    ["BlackKeyC#"]: Mesh;
    ["BlackKeyG#"]: Mesh;
    WhiteKeyD: Mesh;
    WhiteKeyE: Mesh;
    WhiteKeyF: Mesh;
    WhiteKeyG: Mesh;
    WhiteKeyA: Mesh;
    WhiteKeyB: Mesh;
    ["BlackKeyD#"]: Mesh;
    ["BlackKeyF#"]: Mesh;
    ["BlackKeyA#"]: Mesh;
    ScreenBorder: Mesh;
    CaseR3: Mesh;
    ScreenInside: Mesh;
    ButtonsC: Mesh;
    ["ButtonsC#"]: Mesh;
    ButtonsD: Mesh;
    ["ButtonsD#"]: Mesh;
    ButtonsE: Mesh;
    ButtonsF: Mesh;
    ["ButtonsF#"]: Mesh;
    ButtonsG: Mesh;
    ["ButtonsG#"]: Mesh;
    ButtonsA: Mesh;
    ["ButtonsA#"]: Mesh;
    ButtonsB: Mesh;
    Buttons013: Mesh;
    Buttons014: Mesh;
  };
  materials: {
    ["PianoKey.White"]: MeshStandardMaterial;
    ["PianoKey.Black"]: MeshStandardMaterial;
    ["Piano.Screen.Border"]: MeshStandardMaterial;
    PianoCase: MeshStandardMaterial;
    ["Piano.Screen.Inside"]: MeshStandardMaterial;
    ["Button.DynamicText.001"]: MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

const MUSIC_FILE = "/music/MML_apple_market.mp3";

export function Ryoturia(props: JSX.IntrinsicElements["group"]) {
  const [isPlaying, setIsPlaying] = useState(false);
  const group = React.useRef<Group>(null);
  const modelViewRef = React.useRef<Array<number>>([]);
  const audioEl = React.useRef<HTMLAudioElement>(new Audio(MUSIC_FILE));
  const { nodes, materials, animations } = useGLTF(
    "/models/Ryoturia MIDI Piano Web Animation - R2 - Apple Market - V2.glb"
  );
  const { actions } = useAnimations(animations, group);

  const startAnimation = () => {
    console.log("toggling animation");
    const actionMap = Object.values(actions);
    // Loop through each object and start it's animation
    if (isPlaying) {
      actionMap.forEach((action) => {
        action.paused = false;
      });
    } else {
      actionMap.forEach((action) => {
        action.play();
      });
    }
    // Start audio
    // if (isPlaying) {
    //   audioEl.current.pause();
    // } else {
    //   audioEl.current.play();
    // }

    setIsPlaying((prevPlaying) => !prevPlaying);
  };

  useEffect(() => {
    startAnimation();
  }, []);

  // useEffect(() => {
  //   const audioElCache = audioEl.current;

  //   return () => {
  //     audioElCache.pause();
  //   };
  // }, []);

  console.log("button material", materials["Button.DynamicText.001"]);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      // onClick={throttle(startAnimation, 1420)}
    >
      <group name="Scene">
        <PianoKey
          name="WhiteKeyC"
          geometry={nodes.WhiteKeyC.geometry}
          position={[-0.488, 0.901, -5.421]}
        />
        <PianoKey
          name="BlackKeyC#"
          geometry={nodes["BlackKeyC#"].geometry}
          position={[-0.096, 1.014, -5.417]}
          black
        />
        <PianoKey
          name="BlackKeyG#"
          geometry={nodes["BlackKeyG#"].geometry}
          position={[4.304, 1.014, -5.417]}
          black
        />
        <PianoKey
          name="WhiteKeyD"
          geometry={nodes.WhiteKeyD.geometry}
          position={[0.578, 0.901, -5.421]}
        />
        <PianoKey
          name="WhiteKeyE"
          geometry={nodes.WhiteKeyE.geometry}
          position={[1.644, 0.901, -5.421]}
        />
        <PianoKey
          name="WhiteKeyF"
          geometry={nodes.WhiteKeyF.geometry}
          position={[2.71, 0.901, -5.421]}
        />
        <PianoKey
          name="WhiteKeyG"
          geometry={nodes.WhiteKeyG.geometry}
          position={[3.775, 0.901, -5.421]}
        />
        <PianoKey
          name="WhiteKeyA"
          geometry={nodes.WhiteKeyA.geometry}
          position={[4.841, 0.901, -5.421]}
        />
        <PianoKey
          name="WhiteKeyB"
          geometry={nodes.WhiteKeyB.geometry}
          position={[5.907, 0.901, -5.421]}
        />
        <PianoKey
          name="BlackKeyD#"
          geometry={nodes["BlackKeyD#"].geometry}
          position={[1.111, 1.014, -5.417]}
          black
        />
        <PianoKey
          name="BlackKeyF#"
          geometry={nodes["BlackKeyF#"].geometry}
          position={[3.217, 1.014, -5.417]}
          black
        />
        <PianoKey
          name="BlackKeyA#"
          geometry={nodes["BlackKeyA#"].geometry}
          position={[5.357, 1.014, -5.417]}
          black
        />
        <mesh
          name="ScreenBorder"
          geometry={nodes.ScreenBorder.geometry}
          material={materials["Piano.Screen.Border"]}
          position={[2.815, 1.423, -8.023]}
        />
        <mesh
          name="CaseR3"
          geometry={nodes.CaseR3.geometry}
          material={materials.PianoCase}
          position={[-0.682, 1.109, -2.962]}
        />
        <mesh
          name="ScreenInside"
          geometry={nodes.ScreenInside.geometry}
          material={materials["Piano.Screen.Inside"]}
          position={[2.815, 1.414, -8.023]}
          scale={0.991}
        />
        <DrumpadButton
          name="ButtonsC"
          geometry={nodes.ButtonsC.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsC#"
          geometry={nodes["ButtonsC#"].geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
          debug
        />
        <DrumpadButton
          name="ButtonsD"
          geometry={nodes.ButtonsD.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsD#"
          geometry={nodes["ButtonsD#"].geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsE"
          geometry={nodes.ButtonsE.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <mesh
          name="ButtonsF"
          geometry={nodes.ButtonsF.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsF#"
          geometry={nodes["ButtonsF#"].geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsG"
          geometry={nodes.ButtonsG.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsG#"
          geometry={nodes["ButtonsG#"].geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsA"
          geometry={nodes.ButtonsA.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsA#"
          geometry={nodes["ButtonsA#"].geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="ButtonsB"
          geometry={nodes.ButtonsB.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="Buttons013"
          geometry={nodes.Buttons013.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
        <DrumpadButton
          name="Buttons014"
          geometry={nodes.Buttons014.geometry}
          material={materials["Button.DynamicText.001"]}
          position={[-0.518, 1.453, -6.839]}
        />
      </group>
    </group>
  );
}

export default Ryoturia;

useGLTF.preload(
  "/models/Ryoturia MIDI Piano Web Animation - R2 - Apple Market - V2.glb"
);
